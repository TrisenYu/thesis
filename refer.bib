@inproceedings{haas_bringing_2017,
    location   = {Barcelona Spain},
    title      = {Bringing the web up to speed with {WebAssembly}},
    isbn       = {978-1-4503-4988-8},
    url        = {https://dl.acm.org/doi/10.1145/3062341.3062363},
    doi        = {10.1145/3062341.3062363},
    eventtitle = {{PLDI} '17: {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
    pages      = {185--200},
    booktitle  = {Proceedings of the 38th {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
    publisher  = {{ACM}},
    author     = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, Jf},
    urldate    = {2024-11-28},
    date       = {2017-06-14},
    langid     = {english},
    file       = {PDF:F\:\\Zotero\\Data-storage\\storage\\BE53QJLM\\Haas 等 - 2017 - Bringing the web up to speed with WebAssembly.pdf:application/pdf}
}
@inproceedings{hive,
    author    = {Peihua Zhang and Chenggang Wu and Xiangyu Meng and Yinqian Zhang and Mingfan Peng and Shiyang Zhang and Bing Hu and Mengyao Xie and Yuanming Lai and Yan Kang and Zhe Wang},
    title     = {{HIVE}: A Hardware-assisted Isolated Execution Environment for {eBPF} on {AArch64}},
    booktitle = {33rd USENIX Security Symposium (USENIX Security 24)},
    year      = {2024},
    isbn      = {978-1-939133-44-1},
    address   = {Philadelphia, PA},
    pages     = {163--180},
    url       = {https://www.usenix.org/conference/usenixsecurity24/presentation/zhang-peihua},
    publisher = {USENIX Association},
    month     = aug
}
@inproceedings{johnsonWaVeVerifiablySecure2023,
    title      = {{{WaVe}}: A Verifiably Secure {{WebAssembly}} Sandboxing Runtime},
    shorttitle = {{{WaVe}}},
    booktitle  = {2023 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
    author     = {Johnson, Evan and Laufer, Evan and Zhao, Zijie and Gohman, Dan and Narayan, Shravan and Savage, Stefan and Stefan, Deian and Brown, Fraser},
    year       = {2023},
    month      = may,
    pages      = {2940--2955},
    publisher  = {IEEE},
    address    = {San Francisco, CA, USA},
    doi        = {10.1109/SP46215.2023.10179357},
    urldate    = {2024-11-26},
    copyright  = {https://doi.org/10.15223/policy-009},
    isbn       = {978-1-6654-9336-9},
    langid     = {english},
    keywords   = {runtime,wasm},
    file       = {F:\Zotero\Data-storage\storage\8PQ4G9YS\Johnson 等 - 2023 - WaVe a verifiably secure WebAssembly sandboxing runtime.pdf}
}
@inproceedings {lehmannEverythingOldNew,
    author = {Daniel Lehmann and Johannes Kinder and Michael Pradel},
    title = {Everything Old is New Again: Binary Security of {WebAssembly}},
    booktitle = {29th USENIX Security Symposium (USENIX Security 20)},
    year = {2020},
    isbn = {978-1-939133-17-5},
    pages = {217--234},
    url = {https://www.usenix.org/conference/usenixsecurity20/presentation/lehmann},
    publisher = {USENIX Association},
    month = aug
}
@inproceedings{lehmannWasabiFrameworkDynamically2019,
    title      = {Wasabi: {{A Framework}} for {{Dynamically Analyzing WebAssembly}}},
    shorttitle = {Wasabi},
    booktitle  = {Proceedings of the {{Twenty-Fourth International Conference}} on {{Architectural Support}} for {{Programming Languages}} and {{Operating Systems}}},
    author     = {Lehmann, Daniel and Pradel, Michael},
    year       = {2019},
    month      = apr,
    pages      = {1045--1058},
    publisher  = {ACM},
    address    = {Providence RI USA},
    doi        = {10.1145/3297858.3304068},
    urldate    = {2024-11-28},
    isbn       = {978-1-4503-6240-5},
    langid     = {english},
    file       = {F:\Zotero\Data-storage\storage\CR5SISRJ\Lehmann和Pradel - 2019 - Wasabi A Framework for Dynamically Analyzing WebAssembly.pdf}
}
@misc{WasmbpfStreamliningEBPF2024,
    title         = {Wasm-Bpf: {{Streamlining eBPF Deployment}} in {{Cloud Environments}} with {{WebAssembly}}},
    shorttitle    = {Wasm-Bpf},
    author        = {Zheng, Yusheng and Yu, Tong and Yang, Yiwei and Quinn, Andrew},
    year          = {2024},
    month         = aug,
    number        = {arXiv:2408.04856},
    eprint        = {2408.04856},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2408.04856},
    urldate       = {2024-11-28},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {Computer Science - Operating Systems},
    file          = {F:\Zotero\Data-storage\storage\3XCTYKPM\Zheng 等 - 2024 - Wasm-bpf Streamlining eBPF Deployment in Cloud Environments with WebAssembly.pdf}
}

@article{WebAssemblySummaryOnSecurity,
    title   = {WebAssembly安全研究综述},
    journal = {计算机研究与发展},
    volume  = {61},
    number  = {8},
    pages   = {1-27},
    year    = {2024},
    issn    = {1000-1239},
    doi     = {10.7544/issn1000-1239.202330049},
    url     = {https://crad.ict.ac.cn/cn/article/doi/10.7544/issn1000-1239.202330049},
    author  = {庄骏杰 and 胡霜 and 华保健 and 汪炀 and 潘志中}
}
@misc{zhengBpftimeUserspaceEBPF2023,
    title         = {Bpftime: Userspace {{eBPF Runtime}} for {{Uprobe}}, {{Syscall}} and {{Kernel-User Interactions}}},
    shorttitle    = {Bpftime},
    author        = {Zheng, Yusheng and Yu, Tong and Yang, Yiwei and Hu, Yanpeng and Lai, Xiaozheng and Quinn, Andrew},
    year          = {2023},
    month         = dec,
    number        = {arXiv:2311.07923},
    eprint        = {2311.07923},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2311.07923},
    urldate       = {2024-12-01},
    abstract      = {In kernel-centric operations, the uprobe component of eBPF frequently encounters performance bottlenecks, largely attributed to the overheads borne by context switches. Transitioning eBPF operations to user space bypasses these hindrances, thereby optimizing performance. This also enhances configurability and obviates the necessity for root access or privileges for kernel eBPF, subsequently minimizing the kernel attack surface. This paper introduces bpftime, a novel user-space eBPF runtime, which leverages binary rewriting to implement uprobe and syscall hook capabilities. Through bpftime, userspace uprobes achieve a 10x speed enhancement compared to their kernel counterparts without requiring dual context switches. Additionally, this runtime facilitates the programmatic hooking of syscalls within a process, both safely and efficiently. Bpftime can be seamlessly attached to any running process, eliminating the need for either a restart or manual recompilation. Our implementation also extends to interprocess eBPF Maps within shared memory, catering to summary aggregation or control plane communication requirements. Compatibility with existing eBPF toolchains such as clang and libbpf is maintained, not only simplifying the development of user-space eBPF without necessitating any modifications but also supporting CO-RE through BTF. Through bpftime, we not only enhance uprobe performance but also extend the versatility and user-friendliness of eBPF runtime in user space, paving the way for more efficient and secure kernel operations.},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {Computer Science - Operating Systems},
    file          = {F:\Zotero\Data-storage\storage\B7TAESAB\Zheng 等 - 2023 - bpftime userspace eBPF Runtime for Uprobe, Syscall and Kernel-User Interactions.pdf}
}
