@inproceedings{hive,
    author    = {Peihua Zhang and Chenggang Wu and Xiangyu Meng and Yinqian Zhang and Mingfan Peng and Shiyang Zhang and Bing Hu and Mengyao Xie and Yuanming Lai and Yan Kang and Zhe Wang},
    title     = {{HIVE}: A Hardware-assisted Isolated Execution Environment for {eBPF} on {AArch64}},
    booktitle = {33rd USENIX Security Symposium (USENIX Security 24)},
    year      = {2024},
    isbn      = {978-1-939133-44-1},
    address   = {Philadelphia, PA},
    pages     = {163--180},
    url       = {https://www.usenix.org/conference/usenixsecurity24/presentation/zhang-peihua},
    publisher = {USENIX Association},
    month     = aug
}
@inproceedings{haas_bringing_2017,
    location   = {Barcelona Spain},
    title      = {Bringing the web up to speed with {WebAssembly}},
    isbn       = {978-1-4503-4988-8},
    url        = {https://dl.acm.org/doi/10.1145/3062341.3062363},
    doi        = {10.1145/3062341.3062363},
    abstract   = {The maturation of the Web platform has given rise to sophisticated and demanding Web applications such as interactive 3D visualization, audio and video software, and games. With that, efﬁciency and security of code on the Web has become more important than ever. Yet {JavaScript} as the only builtin language of the Web is not well-equipped to meet these requirements, especially as a compilation target.},
    eventtitle = {{PLDI} '17: {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
    pages      = {185--200},
    booktitle  = {Proceedings of the 38th {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
    publisher  = {{ACM}},
    author     = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, Jf},
    urldate    = {2024-11-28},
    date       = {2017-06-14},
    langid     = {english},
    file       = {PDF:F\:\\Zotero\\Data-storage\\storage\\BE53QJLM\\Haas 等 - 2017 - Bringing the web up to speed with WebAssembly.pdf:application/pdf}
}
@article{WebAssemblySummaryOnSecurity,
    title   = {WebAssembly安全研究综述},
    journal = {计算机研究与发展},
    volume  = {61},
    number  = {8},
    pages   = {1-27},
    year    = {2024},
    issn    = {1000-1239},
    doi     = {10.7544/issn1000-1239.202330049},
    url     = {https://crad.ict.ac.cn/cn/article/doi/10.7544/issn1000-1239.202330049},
    author  = {庄骏杰 and 胡霜 and 华保健 and 汪炀 and 潘志中}
}

@misc{WasmbpfStreamliningEBPF2024,
    title         = {Wasm-Bpf: {{Streamlining eBPF Deployment}} in {{Cloud Environments}} with {{WebAssembly}}},
    shorttitle    = {Wasm-Bpf},
    author        = {Zheng, Yusheng and Yu, Tong and Yang, Yiwei and Quinn, Andrew},
    year          = {2024},
    month         = aug,
    number        = {arXiv:2408.04856},
    eprint        = {2408.04856},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2408.04856},
    urldate       = {2024-11-28},
    abstract      = {The extended Berkeley Packet Filter (eBPF) is extensively utilized for observability and performance analysis in cloudnative environments. However, deploying eBPF programs across a heterogeneous cloud environment presents challenges, including compatibility issues across different kernel versions, operating systems, runtimes, and architectures. Traditional deployment methods, such as standalone containers or tightly integrated core applications, are cumbersome and inefficient, particularly when dynamic plugin management is required. To address these challenges, we introduce Universal BPF (Wasm-bpf), a lightweight runtime on WebAssembly (Wasm) and the WebAssembly System Interface (WASI). Leveraging Wasm's platform independence and WASI's standardized system interface, with enhanced relocation for different architectures, Wasm-bpf ensures cross-platform compatibility for eBPF programs. It simplifies deployment by integrating with container toolchains, allowing eBPF programs to be packaged as Wasm modules that can be easily managed within cloud environments. Additionally, Wasmbpf supports dynamic plugin management in WebAssembly. Our implementation and evaluation demonstrate that Wasmbpf introduces minimal overhead compared to native eBPF implementations while simplifying the deployment process.},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {Computer Science - Operating Systems},
    file          = {F:\Zotero\Data-storage\storage\3XCTYKPM\Zheng 等 - 2024 - Wasm-bpf Streamlining eBPF Deployment in Cloud Environments with WebAssembly.pdf}
}
