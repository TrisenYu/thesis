@article{10.1145/3371038,
    author     = {Vieira, Marcos A. M. and Castanho, Matheus S. and Pac\'{\i}fico, Racyus D. G. and Santos, Elerson R. S. and J\'{u}nior, Eduardo P. M. C\^{a}mara and Vieira, Luiz F. M.},
    title      = {Fast Packet Processing with eBPF and XDP: Concepts, Code, Challenges, and Applications},
    year       = {2020},
    issue_date = {January 2021},
    publisher  = {Association for Computing Machinery},
    address    = {New York, NY, USA},
    volume     = {53},
    number     = {1},
    issn       = {0360-0300},
    url        = {https://doi.org/10.1145/3371038},
    doi        = {10.1145/3371038},
    journal    = {ACM Comput. Surv.},
    month      = feb,
    articleno  = {16},
    numpages   = {36},
    keywords   = {packet processing, network functions, Computer networking}
}
@inproceedings{280870,
    author    = {Yuhong Zhong and Haoyu Li and Yu Jian Wu and Ioannis Zarkadas and Jeffrey Tao and Evan Mesterhazy and Michael Makris and Junfeng Yang and Amy Tai and Ryan Stutsman and Asaf Cidon},
    title     = {{XRP}: {In-Kernel} Storage Functions with {eBPF}},
    booktitle = {16th USENIX Symposium on Operating Systems Design and Implementation (OSDI 22)},
    year      = {2022},
    isbn      = {978-1-939133-28-1},
    address   = {Carlsbad, CA},
    pages     = {375--393},
    url       = {https://www.usenix.org/conference/osdi22/presentation/zhong},
    publisher = {USENIX Association},
    month     = jul
}
@inproceedings{9110434,
    author    = {Cassagnes, Cyril and Trestioreanu, Lucian and Joly, Clement and State, Radu},
    booktitle = {NOMS 2020 - 2020 IEEE/IFIP Network Operations and Management Symposium},
    title     = {The rise of eBPF for non-intrusive performance monitoring},
    year      = {2020},
    volume    = {},
    number    = {},
    pages     = {1-7},
    keywords  = {Connectors;Protocols;Linux;Production;Containers;Software;Performance analysis;Performance;Cloud computing;Interledger;eBPF;Profiling;Tracing},
    doi       = {10.1109/NOMS47738.2020.9110434}
}
@inproceedings{bhansaliFirstLookCode2022,
    title     = {A {{First Look}} at {{Code Obfuscation}} for {{WebAssembly}}},
    booktitle = {Proceedings of the 15th {{ACM Conference}} on {{Security}} and {{Privacy}} in {{Wireless}} and {{Mobile Networks}}},
    author    = {Bhansali, Shrenik and Aris, Ahmet and Acar, Abbas and Oz, Harun and Uluagac, A. Selcuk},
    year      = {2022},
    month     = may,
    pages     = {140--145},
    publisher = {ACM},
    address   = {San Antonio TX USA},
    doi       = {10.1145/3507657.3528560},
    urldate   = {2024-11-28},
    abstract  = {WebAssembly (Wasm) has seen a lot of attention lately as it spreads through the mobile computing domain and becomes the new standard for performance-oriented web development. It has diversified its uses far beyond just web applications by acting as an execution environment for mobile agents, containers for IoT devices, and enabling new serverless approaches for edge computing. Within the numerous uses of Wasm, not all of them are benign. With the rise of Wasm-based cryptojacking malware, analyzing Wasm applications has been a hot topic in the literature, resulting in numerous Wasmbased cryptojacking detection systems. Many of these methods rely on static analysis, which traditionally can be circumvented through obfuscation. However, the feasibility of the obfuscation techniques for Wasm programs has never been investigated thoroughly. In this paper, we address this gap and perform the first look at code obfuscation for Wasm. We apply numerous obfuscation techniques to Wasm programs, and test their effectiveness in producing a fully obfuscated Wasm program. Particularly, we obfuscate both benign Wasm-based web applications and cryptojacking malware instances and feed them into a state-of-the-art Wasm cryptojacking detector to see if current Wasm analysis methods can be subverted with obfuscation. Our analysis shows that obfuscation can be highly effective and can cause even a state-of-the-art detector to misclassify the obfuscated Wasm samples.},
    isbn      = {978-1-4503-9216-7},
    langid    = {english},
    file      = {F:\Zotero\Data-storage\storage\MY6P4Q5Z\Bhansali 等 - 2022 - A First Look at Code Obfuscation for WebAssembly.pdf}
}
@inproceedings{haas_bringing_2017,
    location   = {Barcelona Spain},
    title      = {Bringing the web up to speed with {WebAssembly}},
    isbn       = {978-1-4503-4988-8},
    url        = {https://dl.acm.org/doi/10.1145/3062341.3062363},
    doi        = {10.1145/3062341.3062363},
    eventtitle = {{PLDI} '17: {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
    pages      = {185--200},
    booktitle  = {Proceedings of the 38th {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
    publisher  = {{ACM}},
    author     = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, Jf},
    urldate    = {2024-11-28},
    date       = {2017-06-14},
    langid     = {english},
    file       = {PDF:F\:\\Zotero\\Data-storage\\storage\\BE53QJLM\\Haas 等 - 2017 - Bringing the web up to speed with WebAssembly.pdf:application/pdf}
}
@inproceedings{HaoValidating,
    author    = {Hao Sun and Zhendong Su},
    title     = {Validating the {eBPF} Verifier via State Embedding},
    booktitle = {18th USENIX Symposium on Operating Systems Design and Implementation (OSDI 24)},
    year      = {2024},
    isbn      = {978-1-939133-40-3},
    address   = {Santa Clara, CA},
    pages     = {615--628},
    url       = {https://www.usenix.org/conference/osdi24/presentation/sun-hao},
    publisher = {USENIX Association},
    month     = jul
}

@inproceedings{hive,
    author    = {Peihua Zhang and Chenggang Wu and Xiangyu Meng and Yinqian Zhang and Mingfan Peng and Shiyang Zhang and Bing Hu and Mengyao Xie and Yuanming Lai and Yan Kang and Zhe Wang},
    title     = {{HIVE}: A Hardware-assisted Isolated Execution Environment for {eBPF} on {AArch64}},
    booktitle = {33rd USENIX Security Symposium (USENIX Security 24)},
    year      = {2024},
    isbn      = {978-1-939133-44-1},
    address   = {Philadelphia, PA},
    pages     = {163--180},
    url       = {https://www.usenix.org/conference/usenixsecurity24/presentation/zhang-peihua},
    publisher = {USENIX Association},
    month     = aug
}
@inproceedings{JayProvablySafe,
    author    = {Jay Bosamiya and Wen Shih Lim and Bryan Parno},
    title     = {{Provably-Safe} Multilingual Software Sandboxing using {WebAssembly}},
    booktitle = {31st USENIX Security Symposium (USENIX Security 22)},
    year      = {2022},
    isbn      = {978-1-939133-31-1},
    address   = {Boston, MA},
    pages     = {1975--1992},
    url       = {https://www.usenix.org/conference/usenixsecurity22/presentation/bosamiya},
    publisher = {USENIX Association},
    month     = aug
}

@inproceedings{johnsonWaVeVerifiablySecure2023,
    title      = {{{WaVe}}: A Verifiably Secure {{WebAssembly}} Sandboxing Runtime},
    shorttitle = {{{WaVe}}},
    booktitle  = {2023 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
    author     = {Johnson, Evan and Laufer, Evan and Zhao, Zijie and Gohman, Dan and Narayan, Shravan and Savage, Stefan and Stefan, Deian and Brown, Fraser},
    year       = {2023},
    month      = may,
    pages      = {2940--2955},
    publisher  = {IEEE},
    address    = {San Francisco, CA, USA},
    doi        = {10.1109/SP46215.2023.10179357},
    urldate    = {2024-11-26},
    copyright  = {https://doi.org/10.15223/policy-009},
    isbn       = {978-1-6654-9336-9},
    langid     = {english},
    keywords   = {runtime,wasm},
    file       = {F:\Zotero\Data-storage\storage\8PQ4G9YS\Johnson 等 - 2023 - WaVe a verifiably secure WebAssembly sandboxing runtime.pdf}
}
@inproceedings{lehmannEverythingOldNew,
    author    = {Daniel Lehmann and Johannes Kinder and Michael Pradel},
    title     = {Everything Old is New Again: Binary Security of {WebAssembly}},
    booktitle = {29th USENIX Security Symposium (USENIX Security 20)},
    year      = {2020},
    isbn      = {978-1-939133-17-5},
    pages     = {217--234},
    url       = {https://www.usenix.org/conference/usenixsecurity20/presentation/lehmann},
    publisher = {USENIX Association},
    month     = aug
}
@inproceedings{lehmannWasabiFrameworkDynamically2019,
    title      = {Wasabi: {{A Framework}} for {{Dynamically Analyzing WebAssembly}}},
    shorttitle = {Wasabi},
    booktitle  = {Proceedings of the {{Twenty-Fourth International Conference}} on {{Architectural Support}} for {{Programming Languages}} and {{Operating Systems}}},
    author     = {Lehmann, Daniel and Pradel, Michael},
    year       = {2019},
    month      = apr,
    pages      = {1045--1058},
    publisher  = {ACM},
    address    = {Providence RI USA},
    doi        = {10.1145/3297858.3304068},
    urldate    = {2024-11-28},
    isbn       = {978-1-4503-6240-5},
    langid     = {english},
    file       = {F:\Zotero\Data-storage\storage\CR5SISRJ\Lehmann和Pradel - 2019 - Wasabi A Framework for Dynamically Analyzing WebAssembly.pdf}
}

@misc{narayanSwivelHardeningWebAssembly,
  title = {Swivel: {{Hardening WebAssembly}} against {{Spectre}}},
  shorttitle = {Swivel},
  author = {Narayan, Shravan and Disselkoen, Craig and Moghimi, Daniel and Cauligi, Sunjay and Johnson, Evan and Gang, Zhao and {Vahldiek-Oberwagner}, Anjo and Sahita, Ravi and Shacham, Hovav and Tullsen, Dean and Stefan, Deian},
  year = {2021},
  publisher = {arXiv},
  doi = {10.48550/ARXIV.2102.12730},
  urldate = {2024-12-02},
  abstract = {We describe Swivel, a new compiler framework for hardening WebAssembly (Wasm) against Spectre attacks. Outside the browser, Wasm has become a popular lightweight, in-process sandbox and is, for example, used in production to isolate different clients on edge clouds and function-as-a-service platforms. Unfortunately, Spectre attacks can bypass Wasm's isolation guarantees. Swivel hardens Wasm against this class of attacks by ensuring that potentially malicious code can neither use Spectre attacks to break out of the Wasm sandbox nor coerce victim code-another Wasm client or the embedding process-to leak secret data. We describe two Swivel designs, a software-only approach that can be used on existing CPUs, and a hardware-assisted approach that uses extension available in Intel 11th generation CPUs. For both, we evaluate a randomized approach that mitigates Spectre and a deterministic approach that eliminates Spectre altogether. Our randomized implementations impose under 10.3\% overhead on the Wasm-compatible subset of SPEC 2006, while our deterministic implementations impose overheads between 3.3\% and 240.2\%. Though high on some benchmarks, Swivel's overhead is still between 9x and 36.3x smaller than existing defenses that rely on pipeline fences.},
  copyright = {arXiv.org perpetual, non-exclusive license},
  langid = {american},
  keywords = {Cryptography and Security (cs.CR),D.4.6,FOS: Computer and information sciences},
  file = {F:\Zotero\Data-storage\storage\GUBNSYX4\Narayan 等 - 2021 - Swivel Hardening WebAssembly against Spectre.pdf}
}

@inproceedings{sunFindingCorrectnessBugs2024,
    title     = {Finding {{Correctness Bugs}} in {{eBPF Verifier}} with {{Structured}} and {{Sanitized Program}}},
    booktitle = {Proceedings of the {{Nineteenth European Conference}} on {{Computer Systems}}},
    author    = {Sun, Hao and Xu, Yiru and Liu, Jianzhong and Shen, Yuheng and Guan, Nan and Jiang, Yu},
    year      = {2024},
    month     = apr,
    pages     = {689--703},
    publisher = {ACM},
    address   = {Athens Greece},
    doi       = {10.1145/3627703.3629562},
    urldate   = {2024-11-26},
    isbn      = {979-8-4007-0437-6},
    langid    = {english},
    file      = {F:\Zotero\Data-storage\storage\4GZ37DE2\Sun 等 - 2024 - Finding Correctness Bugs in eBPF Verifier with Structured and Sanitized Program.pdf}
}
@misc{waseemIssuesTheirCauses2024,
    title         = {Issues and {{Their Causes}} in {{WebAssembly Applications}}: {{An Empirical Study}}},
    shorttitle    = {Issues and {{Their Causes}} in {{WebAssembly Applications}}},
    author        = {Waseem, Muhammad and Das, Teerath and Ahmad, Aakash and Liang, Peng and Mikkonen, Tommi},
    year          = {2024},
    month         = apr,
    number        = {arXiv:2311.00646},
    eprint        = {2311.00646},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2311.00646},
    urldate       = {2024-11-28},
    abstract      = {WebAssembly (Wasm) is a binary instruction format designed for secure and efficient execution within sandboxed environments predominantly web apps and browsers - to facilitate performance, security, and flexibility of web programming languages. In recent years, Wasm has gained significant attention from the academic research community and industrial development projects to engineer high-performance web applications. Despite the offered benefits, developers encounter a multitude of issues rooted in Wasm (e.g., faults, errors, failures) and are often unaware of their root causes that impact the development of web applications. To this end, we conducted an empirical study that mines and documents practitioners' knowledge expressed as 385 issues from 12 open-source Wasm projects deployed on GitHub and 354 question-answer posts via Stack Overflow. Overall, we identified 120 types of issues, which were categorized into 19 subcategories and 9 categories to create a taxonomical classification of issues encountered in Wasm-based applications. Furthermore, root cause analysis of the issues helped us identify 278 types of causes, which have been categorized into 29 subcategories and 10 categories as a taxonomy of causes. Our study led to first-of-its-kind taxonomies of the issues faced by developers and their underlying causes in Wasm-based applications. The issue-cause taxonomies - identified from GitHub and SO, offering empirically derived guidelines - can guide researchers and practitioners to design, develop, and refactor Wasm-based applications.},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {Computer Science - Software Engineering},
    file          = {F:\Zotero\Data-storage\storage\LKJ5IZJN\Waseem 等 - 2024 - Issues and Their Causes in WebAssembly Applications An Empirical Study.pdf}
}
@misc{WasmbpfStreamliningEBPF2024,
    title         = {Wasm-Bpf: {{Streamlining eBPF Deployment}} in {{Cloud Environments}} with {{WebAssembly}}},
    shorttitle    = {Wasm-Bpf},
    author        = {Zheng, Yusheng and Yu, Tong and Yang, Yiwei and Quinn, Andrew},
    year          = {2024},
    month         = aug,
    number        = {arXiv:2408.04856},
    eprint        = {2408.04856},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2408.04856},
    urldate       = {2024-11-28},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {Computer Science - Operating Systems},
    file          = {F:\Zotero\Data-storage\storage\3XCTYKPM\Zheng 等 - 2024 - Wasm-bpf Streamlining eBPF Deployment in Cloud Environments with WebAssembly.pdf}
}
@article{WebAssemblySummaryOnSecurity,
    title   = {WebAssembly安全研究综述},
    journal = {计算机研究与发展},
    volume  = {61},
    number  = {8},
    pages   = {1-27},
    year    = {2024},
    issn    = {1000-1239},
    doi     = {10.7544/issn1000-1239.202330049},
    url     = {https://crad.ict.ac.cn/cn/article/doi/10.7544/issn1000-1239.202330049},
    author  = {庄骏杰 and 胡霜 and 华保健 and 汪炀 and 潘志中}
}

@inproceedings{YIHeCrossContainer,
    author    = {Yi He and Roland Guo and Yunlong Xing and Xijia Che and Kun Sun and Zhuotao Liu and Ke Xu and Qi Li},
    title     = {Cross Container Attacks: The Bewildered {eBPF} on Clouds},
    booktitle = {32nd USENIX Security Symposium (USENIX Security 23)},
    year      = {2023},
    isbn      = {978-1-939133-37-3},
    address   = {Anaheim, CA},
    pages     = {5971--5988},
    url       = {https://www.usenix.org/conference/usenixsecurity23/presentation/he},
    publisher = {USENIX Association},
    month     = aug
}

@mastersthesis {ZhangZiJunLinuxXiTonge,
    title   = {{{Linux系统eBPF攻击建模及防护技术研究}}},
    author  = {{张子君}},
    year    = {2024},
    address = {浙江杭州},
    school  = {浙江大学},
}
@misc{zhengBpftimeUserspaceEBPF2023,
    title         = {Bpftime: Userspace {{eBPF Runtime}} for {{Uprobe}}, {{Syscall}} and {{Kernel-User Interactions}}},
    shorttitle    = {Bpftime},
    author        = {Zheng, Yusheng and Yu, Tong and Yang, Yiwei and Hu, Yanpeng and Lai, Xiaozheng and Quinn, Andrew},
    year          = {2023},
    month         = dec,
    number        = {arXiv:2311.07923},
    eprint        = {2311.07923},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2311.07923},
    urldate       = {2024-12-01},
    abstract      = {In kernel-centric operations, the uprobe component of eBPF frequently encounters performance bottlenecks, largely attributed to the overheads borne by context switches. Transitioning eBPF operations to user space bypasses these hindrances, thereby optimizing performance. This also enhances configurability and obviates the necessity for root access or privileges for kernel eBPF, subsequently minimizing the kernel attack surface. This paper introduces bpftime, a novel user-space eBPF runtime, which leverages binary rewriting to implement uprobe and syscall hook capabilities. Through bpftime, userspace uprobes achieve a 10x speed enhancement compared to their kernel counterparts without requiring dual context switches. Additionally, this runtime facilitates the programmatic hooking of syscalls within a process, both safely and efficiently. Bpftime can be seamlessly attached to any running process, eliminating the need for either a restart or manual recompilation. Our implementation also extends to interprocess eBPF Maps within shared memory, catering to summary aggregation or control plane communication requirements. Compatibility with existing eBPF toolchains such as clang and libbpf is maintained, not only simplifying the development of user-space eBPF without necessitating any modifications but also supporting CO-RE through BTF. Through bpftime, we not only enhance uprobe performance but also extend the versatility and user-friendliness of eBPF runtime in user space, paving the way for more efficient and secure kernel operations.},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {Computer Science - Operating Systems},
    file          = {F:\Zotero\Data-storage\storage\B7TAESAB\Zheng 等 - 2023 - bpftime userspace eBPF Runtime for Uprobe, Syscall and Kernel-User Interactions.pdf}
}
@inproceedings {258973,
author = {Marco Spaziani Brunella and Giacomo Belocchi and Marco Bonola and Salvatore Pontarelli and Giuseppe Siracusano and Giuseppe Bianchi and Aniello Cammarano and Alessandro Palumbo and Luca Petrucci and Roberto Bifulco},
title = {{hXDP}: Efficient Software Packet Processing on {FPGA} {NICs}},
booktitle = {14th USENIX Symposium on Operating Systems Design and Implementation (OSDI 20)},
year = {2020},
isbn = {978-1-939133-19-9},
pages = {973--990},
url = {https://www.usenix.org/conference/osdi20/presentation/brunella},
publisher = {USENIX Association},
month = nov
}