% 有时候显示不全，给中文/英文多加上 {} 就行了。
@article{10.1145/3371038,
    author     = {Vieira, Marcos A. M. and Castanho, Matheus S. and Pac\'{\i}fico, Racyus D. G. and Santos, Elerson R. S. and J\'{u}nior, Eduardo P. M. C\^{a}mara and Vieira, Luiz F. M.},
    title      = {Fast Packet Processing with eBPF and XDP: Concepts, Code, Challenges, and Applications},
    year       = {2020},
    issue_date = {January 2021},
    publisher  = {Association for Computing Machinery},
    address    = {New York, NY, USA},
    volume     = {53},
    number     = {1},
    issn       = {0360-0300},
    url        = {https://doi.org/10.1145/3371038},
    doi        = {10.1145/3371038},
    journal    = {ACM Comput. Surv.},
    month      = feb,
    articleno  = {16},
    numpages   = {36},
    keywords   = {packet processing, network functions, Computer networking}
}
@inproceedings{258973,
    author    = {Marco Spaziani Brunella and Giacomo Belocchi and Marco Bonola and Salvatore Pontarelli and Giuseppe Siracusano and Giuseppe Bianchi and Aniello Cammarano and Alessandro Palumbo and Luca Petrucci and Roberto Bifulco},
    title     = {{hXDP}: Efficient Software Packet Processing on {FPGA} {NICs}},
    booktitle = {14th USENIX Symposium on Operating Systems Design and Implementation (OSDI 20)},
    year      = {2020},
    isbn      = {978-1-939133-19-9},
    pages     = {973--990},
    url       = {https://www.usenix.org/conference/osdi20/presentation/brunella},
    publisher = {USENIX Association},
    month     = nov
}
@inproceedings{280870,
    author    = {Yuhong Zhong and Haoyu Li and Yu Jian Wu and Ioannis Zarkadas and Jeffrey Tao and Evan Mesterhazy and Michael Makris and Junfeng Yang and Amy Tai and Ryan Stutsman and Asaf Cidon},
    title     = {{XRP}: {In-Kernel} Storage Functions with {eBPF}},
    booktitle = {16th USENIX Symposium on Operating Systems Design and Implementation (OSDI 22)},
    year      = {2022},
    isbn      = {978-1-939133-28-1},
    address   = {Carlsbad, CA},
    pages     = {375--393},
    url       = {https://www.usenix.org/conference/osdi22/presentation/zhong},
    publisher = {USENIX Association},
    month     = jul
}
@inproceedings{9110434,
    author    = {Cassagnes, Cyril and Trestioreanu, Lucian and Joly, Clement and State, Radu},
    booktitle = {NOMS 2020 - 2020 IEEE/IFIP Network Operations and Management Symposium},
    title     = {The rise of eBPF for non-intrusive performance monitoring},
    year      = {2020},
    volume    = {},
    number    = {},
    pages     = {1-7},
    keywords  = {Connectors;Protocols;Linux;Production;Containers;Software;Performance analysis;Performance;Cloud computing;Interledger;eBPF;Profiling;Tracing},
    doi       = {10.1109/NOMS47738.2020.9110434}
}
@inproceedings{9156135,
    author    = {Wen, Elliott and Weber, Gerald},
    booktitle = {2020 IEEE International Conference on Pervasive Computing and Communications Workshops (PerCom Workshops)},
    title     = {Wasmachine: Bring IoT up to Speed with A WebAssembly OS},
    year      = {2020},
    volume    = {},
    number    = {},
    pages     = {1-4},
    keywords  = {Kernel;Runtime;Hardware;Security;Edge computing;Switches;Servers},
    doi       = {10.1109/PerComWorkshops48775.2020.9156135}
}
@inproceedings{bhansaliFirstLookCode2022,
    title     = {A {{First Look}} at {{Code Obfuscation}} for {{WebAssembly}}},
    booktitle = {Proceedings of the 15th {{ACM Conference}} on {{Security}} and {{Privacy}} in {{Wireless}} and {{Mobile Networks}}},
    author    = {Bhansali, Shrenik and Aris, Ahmet and Acar, Abbas and Oz, Harun and Uluagac, A. Selcuk},
    year      = {2022},
    month     = may,
    pages     = {140--145},
    publisher = {ACM},
    address   = {San Antonio TX USA},
    doi       = {10.1145/3507657.3528560},
    urldate   = {2024-11-28},
    isbn      = {978-1-4503-9216-7},
    langid    = {english},
    file      = {F:\Zotero\Data-storage\storage\MY6P4Q5Z\Bhansali 等 - 2022 - A First Look at Code Obfuscation for WebAssembly.pdf}
}

@inproceedings{Daniel2019DiscoveringVI,
    title  = {Discovering Vulnerabilities in {{WebAssembly}} with Code Property Graphs},
    author = {Daniel, Pedro and Lopes, Rogeiro and Santos, Nuno and Santos, Jos{\textasciiacute}e Fragoso},
    year   = {2019},
    file   = {F:\Zotero\Data-storage\storage\9AH4UIBZ\Lopes - Discovering Vulnerabilities in WebAssembly with Code Property Graphs.pdf}
}

@phdthesis{FuzzOnEBPF,
    type    = {{硕士论文}},
    title   = {{基于模糊测试的eBPF漏洞挖掘技术研究}},
    author  = {{李有霖}},
    year    = {2023},
    address = {四川成都},
    urldate = {2024-11-27},
    langid  = {chinese},
    school  = {电子科技大学},
    file    = {F:\Zotero\Data-storage\storage\6Y5KHP89\基于模糊测试的eBPF漏洞挖掘技术研究_李有霖.pdf}
}

@inproceedings{haas_bringing_2017,
    location   = {Barcelona Spain},
    title      = {Bringing the web up to speed with {WebAssembly}},
    isbn       = {978-1-4503-4988-8},
    url        = {https://dl.acm.org/doi/10.1145/3062341.3062363},
    doi        = {10.1145/3062341.3062363},
    eventtitle = {{PLDI} '17: {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
    pages      = {185--200},
    booktitle  = {Proceedings of the 38th {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
    publisher  = {{ACM}},
    author     = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, Jf},
    urldate    = {2024-11-28},
    date       = {2017-06-14},
    langid     = {english},
    file       = {PDF:F\:\\Zotero\\Data-storage\\storage\\BE53QJLM\\Haas 等 - 2017 - Bringing the web up to speed with WebAssembly.pdf:application/pdf}
}
@inproceedings{haasBringingWebSpeed2017,
    title     = {Bringing the Web up to Speed with {{WebAssembly}}},
    booktitle = {Proceedings of the 38th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
    author    = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, Jf},
    year      = {2017},
    month     = jun,
    pages     = {185--200},
    publisher = {ACM},
    address   = {Barcelona Spain},
    doi       = {10.1145/3062341.3062363},
    urldate   = {2024-11-28},
    abstract  = {The maturation of the Web platform has given rise to sophisticated and demanding Web applications such as interactive 3D visualization, audio and video software, and games. With that, efficiency and security of code on the Web has become more important than ever. Yet JavaScript as the only builtin language of the Web is not well-equipped to meet these requirements, especially as a compilation target.},
    isbn      = {978-1-4503-4988-8},
    langid    = {english},
    file      = {F:\Zotero\Data-storage\storage\BE53QJLM\Haas 等 - 2017 - Bringing the web up to speed with WebAssembly.pdf}
}
@inproceedings{HaoValidating,
    author    = {Hao Sun and Zhendong Su},
    title     = {Validating the {eBPF} Verifier via State Embedding},
    booktitle = {18th USENIX Symposium on Operating Systems Design and Implementation (OSDI 24)},
    year      = {2024},
    isbn      = {978-1-939133-40-3},
    address   = {Santa Clara, CA},
    pages     = {615--628},
    url       = {https://www.usenix.org/conference/osdi24/presentation/sun-hao},
    publisher = {USENIX Association},
    month     = jul
}

@inproceedings{hive,
    author    = {Peihua Zhang and Chenggang Wu and Xiangyu Meng and Yinqian Zhang and Mingfan Peng and Shiyang Zhang and Bing Hu and Mengyao Xie and Yuanming Lai and Yan Kang and Zhe Wang},
    title     = {{HIVE}: A Hardware-assisted Isolated Execution Environment for {eBPF} on {AArch64}},
    booktitle = {33rd USENIX Security Symposium (USENIX Security 24)},
    year      = {2024},
    isbn      = {978-1-939133-44-1},
    address   = {Philadelphia, PA},
    pages     = {163--180},
    url       = {https://www.usenix.org/conference/usenixsecurity24/presentation/zhang-peihua},
    publisher = {USENIX Association},
    month     = aug
}
@inproceedings{JangdaNotsoFast,
    title     = {Not so Fast: {{Analyzing}} the Performance of {{WebAssembly}} vs. Native Code},
    booktitle = {2019 {{USENIX}} Annual Technical Conference ({{USENIX ATC}} 19)},
    author    = {Jangda, Abhinav and Powers, Bobby and Berger, Emery D. and Guha, Arjun},
    year      = {2019},
    month     = jul,
    pages     = {107--120},
    publisher = {USENIX Association},
    address   = {Renton, WA},
    isbn      = {978-1-939133-03-8},
    langid    = {american},
    file      = {F:\Zotero\Data-storage\storage\8N8K2KRK\Jangda 等 - Not So Fast Analyzing the Performance of WebAssembly vs. Native Code.pdf}
}
@inproceedings{JayProvablySafe,
    author    = {Jay Bosamiya and Wen Shih Lim and Bryan Parno},
    title     = {{Provably-Safe} Multilingual Software Sandboxing using {WebAssembly}},
    booktitle = {31st USENIX Security Symposium (USENIX Security 22)},
    year      = {2022},
    isbn      = {978-1-939133-31-1},
    address   = {Boston, MA},
    pages     = {1975--1992},
    url       = {https://www.usenix.org/conference/usenixsecurity22/presentation/bosamiya},
    publisher = {USENIX Association},
    month     = aug
}
@inproceedings{johnsonWaVeVerifiablySecure2023,
    title      = {{{WaVe}}: A Verifiably Secure {{WebAssembly}} Sandboxing Runtime},
    shorttitle = {{{WaVe}}},
    booktitle  = {2023 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
    author     = {Johnson, Evan and Laufer, Evan and Zhao, Zijie and Gohman, Dan and Narayan, Shravan and Savage, Stefan and Stefan, Deian and Brown, Fraser},
    year       = {2023},
    month      = may,
    pages      = {2940--2955},
    publisher  = {IEEE},
    address    = {San Francisco, CA, USA},
    doi        = {10.1109/SP46215.2023.10179357},
    urldate    = {2024-11-26},
    copyright  = {https://doi.org/10.15223/policy-009},
    isbn       = {978-1-6654-9336-9},
    langid     = {english},
    keywords   = {runtime,wasm},
    file       = {F:\Zotero\Data-storage\storage\8PQ4G9YS\Johnson 等 - 2023 - WaVe a verifiably secure WebAssembly sandboxing runtime.pdf}
}

@inproceedings{lehmannEverythingOldNew,
    author    = {Daniel Lehmann and Johannes Kinder and Michael Pradel},
    title     = {Everything Old is New Again: Binary Security of {WebAssembly}},
    booktitle = {29th USENIX Security Symposium (USENIX Security 20)},
    year      = {2020},
    isbn      = {978-1-939133-17-5},
    pages     = {217--234},
    url       = {https://www.usenix.org/conference/usenixsecurity20/presentation/lehmann},
    publisher = {USENIX Association},
    month     = aug
}

@inproceedings{lehmannWasabiFrameworkDynamically2019,
    title      = {Wasabi: {{A Framework}} for {{Dynamically Analyzing WebAssembly}}},
    shorttitle = {Wasabi},
    booktitle  = {Proceedings of the {{Twenty-Fourth International Conference}} on {{Architectural Support}} for {{Programming Languages}} and {{Operating Systems}}},
    author     = {Lehmann, Daniel and Pradel, Michael},
    year       = {2019},
    month      = apr,
    pages      = {1045--1058},
    publisher  = {ACM},
    address    = {Providence RI USA},
    doi        = {10.1145/3297858.3304068},
    urldate    = {2024-11-28},
    isbn       = {978-1-4503-6240-5},
    langid     = {english},
    file       = {F:\Zotero\Data-storage\storage\CR5SISRJ\Lehmann和Pradel - 2019 - Wasabi A Framework for Dynamically Analyzing WebAssembly.pdf}
}
@misc{narayanSwivelHardeningWebAssembly,
    title      = {Swivel: {{Hardening WebAssembly}} against {{Spectre}}},
    shorttitle = {Swivel},
    author     = {Narayan, Shravan and Disselkoen, Craig and Moghimi, Daniel and Cauligi, Sunjay and Johnson, Evan and Gang, Zhao and {Vahldiek-Oberwagner}, Anjo and Sahita},
    year       = {2021},
    publisher  = {arXiv},
    doi        = {10.48550/ARXIV.2102.12730},
    urldate    = {2024-12-02},
    copyright  = {arXiv.org perpetual, non-exclusive license},
    langid     = {american},
    keywords   = {Cryptography and Security (cs.CR),D.4.6,FOS: Computer and information sciences},
    file       = {F:\Zotero\Data-storage\storage\GUBNSYX4\Narayan 等 - 2021 - Swivel Hardening WebAssembly against Spectre.pdf}
}
@article{rayOverviewWebAssemblyIoT2023,
    title      = {An {{Overview}} of {{WebAssembly}} for {{IoT}}: {{Background}}, {{Tools}}, {{State-of-the-Art}}, {{Challenges}}, and {{Future Directions}}},
    shorttitle = {An {{Overview}} of {{WebAssembly}} for {{IoT}}},
    author     = {Ray, Partha Pratim},
    year       = {2023},
    month      = aug,
    journal    = {Future Internet},
    volume     = {15},
    number     = {8},
    pages      = {275},
    issn       = {1999-5903},
    doi        = {10.3390/fi15080275},
    urldate    = {2024-12-05},
    abstract   = {This paper explores the relationship between two emerging technologies, WebAssembly (Wasm) and the Internet of Things (IoT). It examines the complementary roles of these technologies and their impact on modern web applications. First, it delves into the capabilities of Wasm as a high-performance binary format that allows developers to leverage low-level languages for computationally intensive tasks. Second, it seeks to explain why integration of IoT and Wasm is important. Third, it discusses the strengths and limitations of various tools and tool chains that are crucial for Wasm development and implementation, with a special focus on IoT. Fourth, it presents the state-ofthe-art with regard to advances that combine both technologies. Fifth, it discusses key challenges and provides future directions. Lastly, it provides an in-depth elaboration of the future aspects of Wasm, with a strong focus on IoT, concluding that IoT and Wasm can provide developers with a versatile toolkit that enables them to balance productivity and performance in both web and non-web development scenarios. The collaborative use of these technologies opens up new possibilities for pushing the boundaries of web application development in terms of interactivity, security, portability, scalability, and efficient computational capabilities. As web and non-web embeddings continue to evolve, the integration of IoT and Wasm will play a crucial role in shaping the future of innovative application development. The key findings of this extensive review work suggest that existing tool sets can be easily conglomerated together to form a new era in WebAssembly--IoT infrastructure for low-power, energy-efficient, and secure edge--IoT ecosystems with near-native execution speed. Furthermore, the expansion of edge--IoT ecosystems can be augmented with prospective cloud-side deployments. However, there remains a strong need to more cohesively advance the amalgamation of Wasm and IoT technologies in the near future.},
    copyright  = {https://creativecommons.org/licenses/by/4.0/},
    langid     = {english},
    file       = {F:\Zotero\Data-storage\storage\DRC3DGQ9\Ray - 2023 - An Overview of WebAssembly for IoT Background, Tools, State-of-the-Art, Challenges, and Future Dire.pdf}
}
@book{riceLearningEBPFProgramming2023,
    title      = {Learning {{eBPF}}: Programming the {{Linux Kernel}} for Enhanced Observability, Networking, and Security},
    shorttitle = {Learning {{eBPF}}},
    author     = {Rice, Liz},
    year       = {2023},
    edition    = {First edition},
    publisher  = {O'Reilly Media},
    address    = {Sebastopol, CA},
    abstract   = {What is eBPF? With this revolutionary technology, you can write custom code that dynamically changes the way the kernel behaves. It's an extraordinary platform for building a whole new generation of security, observability, and networking tools. This practical book is ideal for developers, system administrators, operators, and students who are curious about eBPF and want to know how it works. Author Liz Rice, chief open source officer with cloud native networking and security specialists Isovalent, also provides a foundation for those who want to explore writing eBPF programs themselves},
    isbn       = {978-1-0981-3512-6},
    langid     = {english},
    lccn       = {005.3},
    keywords   = {Application software,Computer security,Development Automation,Linux,Open source software},
    annotation = {OCLC: on1353981026},
    file       = {F:\Zotero\Data-storage\storage\J9AXN9I3\Rice - 2023 - Learning eBPF programming the Linux Kernel for enhanced observability, networking, and security.pdf}
}
@article{RJXB202312023,
    title   = {{{基于PKS硬件特性的eBPF内存隔离机制}}},
    author  = {{李浩} and {古金宇} and {夏虞斌} and {臧斌宇} and {陈海波}},
    year    = {2023},
    journal = {{软件学报}},
    volume  = {34},
    number  = {12},
    pages   = {5921--5939},
    issn    = {1000-9825},
    doi     = {10.13328/j.cnki.jos.006762},
    file    = {F:\Zotero\Data-storage\storage\SU86PK9Z\6762.pdf}
}
@inproceedings{romanoEmpiricalStudyBugs2021,
    title     = {An {{Empirical Study}} of {{Bugs}} in {{WebAssembly Compilers}}},
    booktitle = {2021 36th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
    author    = {Romano, Alan and Liu, Xinyue and Kwon, Yonghwi and Wang, Weihang},
    year      = {2021},
    month     = nov,
    pages     = {42--54},
    publisher = {IEEE},
    address   = {Melbourne, Australia},
    doi       = {10.1109/ASE51524.2021.9678776},
    urldate   = {2024-12-11},
    abstract  = {WebAssembly is the newest programming language for the Web. It defines a portable bytecode format for use as a compilation target for programs developed in high-level languages such as C, C++, and Rust. As a result, WebAssembly binaries are generally created by WebAssembly compilers rather than being written manually. To port native code to the Web, WebAssembly compilers need to address the differences between the source and target languages and dissimilarities in their execution environments. A deep understanding of the bugs in WebAssembly compilers can help compiler developers determine where to focus development and testing efforts. In this paper, we conduct two empirical studies to understand the characteristics of the bugs found in WebAssembly compilers. First, we perform a qualitative analysis of bugs in Emscripten, the most widelyused WebAssembly compiler. We investigate 146 bug reports in Emscripten related to the unique challenges WebAssembly compilers encounter compared with traditional compilers. Second, we provide a quantitative analysis of 1,054 bugs in three opensource WebAssembly compilers, AssemblyScript, Emscripten, and Rustc/Wasm-Bindgen. We analyze these bugs along three dimensions: lifecycle, impact, and sizes of bug-inducing inputs and bug fixes. These studies deepen our understanding of WebAssembly compiler bugs. We hope that the findings of our study will shed light on opportunities to design practical tools for testing and debugging WebAssembly compilers.},
    copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
    isbn      = {978-1-6654-0337-5},
    langid    = {english},
    keywords  = {wasm},
    file      = {F:\Zotero\Data-storage\storage\GUNCQFFI\Romano 等 - 2021 - An Empirical Study of Bugs in WebAssembly Compilers.pdf}
}

@misc{skanehiraWrittingWasmRuntime,
    title        = {Writting a Wasm {{Runtime}} in {{Rust}}},
    year         = {2023},
    author       = {{skanehira}},
    howpublished = {\url{https://github.com/skanehira/writing-a-wasm-runtime-in-rust/}},
    langid       = {english}
}
@inproceedings{sunFindingCorrectnessBugs2024,
    title     = {Finding {{Correctness Bugs}} in {{eBPF Verifier}} with {{Structured}} and {{Sanitized Program}}},
    booktitle = {Proceedings of the {{Nineteenth European Conference}} on {{Computer Systems}}},
    author    = {Sun, Hao and Xu, Yiru and Liu, Jianzhong and Shen, Yuheng and Guan, Nan and Jiang, Yu},
    year      = {2024},
    month     = apr,
    pages     = {689--703},
    publisher = {ACM},
    address   = {Athens Greece},
    doi       = {10.1145/3627703.3629562},
    urldate   = {2024-11-26},
    langid    = {english},
    file      = {F:\Zotero\Data-storage\storage\4GZ37DE2\Sun 等 - 2024 - Finding Correctness Bugs in eBPF Verifier with Structured and Sanitized Program.pdf}
}
@misc{TCPdump,
    author       = {{The Tcpdump Group}},
    howpublished = {\url{https://www.tcpdump.org/}},
    title        = {Tcpdump, a powerful command-line packet analyzer},
    url          = {https://www.tcpdump.org/},
    year         = {2024}
}
@misc{titzerFastInplaceInterpreter2022,
    title         = {A Fast In-Place Interpreter for {{WebAssembly}}},
    author        = {Titzer, Ben L.},
    year          = {2022},
    month         = may,
    number        = {arXiv:2205.01183},
    eprint        = {2205.01183},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2205.01183},
    urldate       = {2024-12-11},
    abstract      = {WebAssembly (Wasm) is a compact, well-specified bytecode format that offers a portable compilation target with near-native execution speed. The bytecode format was specifically designed to be fast to parse, validate, and compile, positioning itself as a portable alternative to native code. It was pointedly not designed to be interpreted directly. Instead, design considerations at the time focused on competing with native code, utilizing optimizing compilers as the primary execution tier. Yet, in JIT scenarios, compilation time and memory consumption critically impact application startup, leading many Wasm engines to later deploy baseline (single-pass) compilers. Though faster, baseline compilers still take time and waste code space for infrequently executed code. A typical interpreter being infeasible, some engines resort to compiling Wasm not to machine code, but to a more compact, but easy to interpret format. This still takes time and wastes memory. Instead, we introduce in this article a fast in-place interpreter for WebAssembly, where no rewrite and no separate format is necessary. Our evaluation shows that in-place interpretation of Wasm code is space-efficient and fast, achieving performance on-par with interpreting a custom-designed internal format. This fills a hole in the execution tier space for Wasm, allowing for even faster startup and lower memory footprint than previous engine configurations.},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {fast,interpreter,wasm},
    file          = {F:\Zotero\Data-storage\storage\D2V4T5ZU\Titzer - 2022 - A fast in-place interpreter for WebAssembly.pdf}
}

@misc{waseemIssuesTheirCauses2024,
    title         = {Issues and {{Their Causes}} in {{WebAssembly Applications}}: {{An Empirical Study}}},
    shorttitle    = {Issues and {{Their Causes}} in {{WebAssembly Applications}}},
    author        = {Waseem, Muhammad and Das, Teerath and Ahmad, Aakash and Liang, Peng and Mikkonen, Tommi},
    year          = {2024},
    month         = apr,
    number        = {arXiv:2311.00646},
    eprint        = {2311.00646},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2311.00646},
    urldate       = {2024-11-28},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {Computer Science - Software Engineering},
    file          = {F:\Zotero\Data-storage\storage\LKJ5IZJN\Waseem 等 - 2024 - Issues and Their Causes in WebAssembly Applications An Empirical Study.pdf}
}

@misc{WasmbpfStreamliningEBPF2024,
    title         = {Wasm-Bpf: {{Streamlining eBPF Deployment}} in {{Cloud Environments}} with {{WebAssembly}}},
    shorttitle    = {Wasm-Bpf},
    author        = {Zheng, Yusheng and Yu, Tong and Yang, Yiwei and Quinn, Andrew},
    year          = {2024},
    month         = aug,
    number        = {arXiv:2408.04856},
    eprint        = {2408.04856},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2408.04856},
    urldate       = {2024-11-28},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {Computer Science - Operating Systems},
    file          = {F:\Zotero\Data-storage\storage\3XCTYKPM\Zheng 等 - 2024 - Wasm-bpf Streamlining eBPF Deployment in Cloud Environments with WebAssembly.pdf}
}
@misc{wasmCommunityGroup,
    author       = {{WebAssembly Community Group}},
    howpublished = {\url{https://webassembly.github.io/spec/core/intro/introduction.html}},
    title        = {Introduction of WebAssembly},
    year         = {2024}
}
@article{WebAssemblySummaryOnSecurity,
    title   = {{WebAssembly安全研究综述}},
    journal = {{计算机研究与发展}},
    volume  = {61},
    number  = {8},
    pages   = {1-27},
    year    = {2024},
    doi     = {https://doi.org/10.7544/issn1000-1239.202330049},
    url     = {https://crad.ict.ac.cn/cn/article/doi/10.7544/issn1000-1239.202330049},
    author  = {庄骏杰 and 胡霜 and 华保健 and 汪炀 and 潘志中}
}
@inproceedings{yanUnderstandingPerformanceWebassembly2021,
    title     = {Understanding the Performance of Webassembly Applications},
    booktitle = {Proceedings of the 21st {{ACM Internet Measurement Conference}}},
    author    = {Yan, Yutian and Tu, Tengfei and Zhao, Lijian and Zhou, Yuchen and Wang, Weihang},
    year      = {2021},
    month     = nov,
    pages     = {533--549},
    publisher = {ACM},
    address   = {Virtual Event},
    doi       = {10.1145/3487552.3487827},
    urldate   = {2024-12-12},
    isbn      = {978-1-4503-9129-0},
    langid    = {english},
    file      = {F:\Zotero\Data-storage\storage\69FWTM9N\Yan 等 - 2021 - Understanding the performance of webassembly applications.pdf}
}
@inproceedings{YIHeCrossContainer,
    author    = {Yi He and Roland Guo and Yunlong Xing and Xijia Che and Kun Sun and Zhuotao Liu and Ke Xu and Qi Li},
    title     = {Cross Container Attacks: The Bewildered {eBPF} on Clouds},
    booktitle = {32nd USENIX Security Symposium (USENIX Security 23)},
    year      = {2023},
    isbn      = {978-1-939133-37-3},
    address   = {Anaheim, CA},
    pages     = {5971--5988},
    url       = {https://www.usenix.org/conference/usenixsecurity23/presentation/he},
    publisher = {USENIX Association},
    month     = aug
}
@misc{zhangResearchWebAssemblyRuntimes2024,
    title         = {Research on {{WebAssembly Runtimes}}: {{A Survey}}},
    shorttitle    = {Research on {{WebAssembly Runtimes}}},
    author        = {Zhang, Yixuan and Liu, Mugeng and Wang, Haoyu and Ma, Yun and Huang, Gang and Liu, Xuanzhe},
    year          = {2024},
    month         = oct,
    number        = {arXiv:2404.12621},
    eprint        = {2404.12621},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2404.12621},
    urldate       = {2024-12-11},
    abstract      = {YIXUAN ZHANG, Peking University, China MUGENG LIU, Peking University, China HAOYU WANG, Huazhong University of Science and Technology, China YUN MA, Peking University, China GANG HUANG, Peking University, China XUANZHE LIU, Peking University, China WebAssembly (abbreviated as Wasm) was initially introduced for the Web but quickly extended its reach into various domains beyond the Web. To create Wasm applications, developers can compile high-level programming languages into Wasm binaries or manually convert equivalent textual formats into Wasm binaries. Regardless of whether it is utilized within or outside the Web, the execution of Wasm binaries is supported by the Wasm runtime. Such a runtime provides a secure, memory-efficient, and sandboxed execution environment designed explicitly for Wasm applications. This paper provides a comprehensive survey of research on WebAssembly runtimes. It covers 98 articles on WebAssembly runtimes and characterizes existing studies from two different angles, including the "internal" research of Wasm runtimes(Wasm runtime design, testing, and analysis) and the "external" research(applying Wasm runtimes to various domains). This paper also proposes future research directions about WebAssembly runtimes. CCS Concepts: {$\bullet$} General and reference {$\rightarrow$} Surveys and overviews.},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {runtime,wasm},
    file          = {F:\Zotero\Data-storage\storage\UH93TJ8R\Zhang 等 - 2024 - Research on WebAssembly Runtimes A Survey.pdf}
}
@mastersthesis{ZhangZiJunLinuxXiTonge,
    title   = {{{Linux系统eBPF攻击建模及防护技术研究}}},
    author  = {{张子君}},
    year    = {2024},
    address = {浙江杭州},
    school  = {浙江大学}
}
@misc{zhengBpftimeUserspaceEBPF2023,
    title         = {Bpftime: Userspace {{eBPF Runtime}} for {{Uprobe}}, {{Syscall}} and {{Kernel-User Interactions}}},
    shorttitle    = {Bpftime},
    author        = {Zheng, Yusheng and Yu, Tong and Yang, Yiwei and Hu, Yanpeng and Lai, Xiaozheng and Quinn, Andrew},
    year          = {2023},
    month         = dec,
    number        = {arXiv:2311.07923},
    eprint        = {2311.07923},
    primaryclass  = {cs},
    publisher     = {arXiv},
    doi           = {10.48550/arXiv.2311.07923},
    urldate       = {2024-12-01},
    archiveprefix = {arXiv},
    langid        = {english},
    keywords      = {Computer Science - Operating Systems},
    file          = {F:\Zotero\Data-storage\storage\B7TAESAB\Zheng 等 - 2023 - bpftime userspace eBPF Runtime for Uprobe, Syscall and Kernel-User Interactions.pdf}
}
